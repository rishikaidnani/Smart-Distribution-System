/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.VaccineManufacturer;

import Business.Enterprise.CDCEnterprise;
import Business.Enterprise.SiteEnterprise;
import Business.Enterprise.VaccineManufacturerEnterprise;
import Business.Order.Order;
import Business.Order.OrderItem;
import Business.Organization.CDC.CDCOperationsOrganization;
import Business.Organization.Organization;
import Business.Vaccine.Vaccine;
import Business.WorkRequest.ManufacturingRequestToManufacturer;
import Business.WorkRequest.ShipmentToDistributionCentre;
import Business.WorkRequest.WorkRequest;
import java.awt.CardLayout;
import java.sql.Timestamp;
import java.util.Date;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Rishika Idnani
 */
public class ViewOrders extends javax.swing.JPanel {

    /**
     * Creates new form ViewOrders
     */
    private JPanel userProcessContainer;
    private VaccineManufacturerEnterprise enterprise;
    private CDCEnterprise cdcEnterprise;

    public ViewOrders(JPanel userProcessContainer, VaccineManufacturerEnterprise enterprise, CDCEnterprise cdcEnterprise) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.enterprise = enterprise;
        this.cdcEnterprise = cdcEnterprise;
        populateVaccineList();
    }

    public void populateVaccineList() {
        DefaultListModel model = new DefaultListModel();
        vaccineJList.removeAll();

        for (Vaccine vaccine : enterprise.getVaccineCatalog().getVaccineList()) {
            model.addElement(vaccine);
        }
        vaccineJList.setModel(model);
    }

    public void populateOrderTable(Vaccine vaccine) {

        DefaultTableModel model = (DefaultTableModel) orderJTable.getModel();
        model.setRowCount(0);

        for (Organization organization : cdcEnterprise.getOrganizationDirectory().getOrganizationList()) {
            if (organization instanceof CDCOperationsOrganization) {
                for (WorkRequest workRequest : organization.getWorkQueue().getWorkRequestList()) {
                    if (workRequest instanceof ManufacturingRequestToManufacturer) {
                        ManufacturingRequestToManufacturer request = (ManufacturingRequestToManufacturer) workRequest;
                        for (OrderItem orderItem : request.getOrder().getOrderItemList()) {
                            if (orderItem.getVaccine() == vaccine && orderItem.getIsOrderItemApprovedByCdc().equals("Approved")
                                    && orderItem.getIsOrderItemShippedToDistributionCentre().equals("Pending")) {
                                Object row[] = new Object[5];
                                row[0] = orderItem.getTotalQuantity();
                                row[1] = request.getOrder().getSite();
                                row[2] = request.getOrder().getSite().getStateName();
                                row[3] = orderItem;
                                row[4] = request.getOrder();
                                model.addRow(row);
                            }
                        }
                    }
                }
            }
        }
    }

    public void ship(String stateName, OrderItem orderItem, SiteEnterprise siteEnterprise, Order order) {
        ShipmentToDistributionCentre workRequest = new ShipmentToDistributionCentre();
        enterprise.getWorkQueue().addRequest(workRequest);
        workRequest.setStateName(stateName);
        workRequest.setOrderItem(orderItem);
        workRequest.setSiteEnterprise(siteEnterprise);
        workRequest.setOrder(order);
        orderItem.setIsOrderItemShippedToDistributionCentre("Shipped");
        populateOrderTable(orderItem.getVaccine());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelDescriptionJLabel = new javax.swing.JLabel();
        vaccineJLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        vaccineJList = new javax.swing.JList();
        displayJLabel = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        orderJTable = new javax.swing.JTable();
        orderJLabel = new javax.swing.JLabel();
        backJButton = new javax.swing.JButton();
        shipJButton = new javax.swing.JButton();

        panelDescriptionJLabel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        panelDescriptionJLabel.setText("View Orders");

        vaccineJLabel.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        vaccineJLabel.setText("Vaccines");

        vaccineJList.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jScrollPane1.setViewportView(vaccineJList);

        displayJLabel.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        displayJLabel.setText(">");
        displayJLabel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayJLabelActionPerformed(evt);
            }
        });

        orderJTable.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        orderJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Quantity", "Ship To Site", "Ship to State", "Vaccine Name", "Order Date/Time"
            }
        ));
        orderJTable.setRowHeight(25);
        jScrollPane2.setViewportView(orderJTable);

        orderJLabel.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        orderJLabel.setText("Order Details");

        backJButton.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        shipJButton.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        shipJButton.setText("Ship the order");
        shipJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shipJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelDescriptionJLabel)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(vaccineJLabel)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(displayJLabel))
                            .addComponent(backJButton))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 540, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(orderJLabel)
                                    .addComponent(shipJButton))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelDescriptionJLabel)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(vaccineJLabel)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(68, 68, 68)
                                .addComponent(displayJLabel))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(orderJLabel)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(backJButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(shipJButton)))
                .addContainerGap(34, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void displayJLabelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayJLabelActionPerformed
        // TODO add your handling code here:
        int selectedIndex = vaccineJList.getSelectedIndex();

        if (selectedIndex < 0) {
            JOptionPane.showMessageDialog(null, "Kindly select a vaccine");
            return;
        }
        Vaccine vaccine = (Vaccine) vaccineJList.getSelectedValue();

        populateOrderTable(vaccine);
    }//GEN-LAST:event_displayJLabelActionPerformed

    private void shipJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shipJButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = orderJTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Kindly select an order!");
            return;
        }
        String stateName = String.valueOf(orderJTable.getValueAt(selectedRow, 2));
        OrderItem orderItem = (OrderItem) orderJTable.getValueAt(selectedRow, 3);

        Vaccine vaccine = orderItem.getVaccine();
        for (Vaccine vaccineForSale : enterprise.getVaccineInventory().getVaccineInventoryList()) {
            if (vaccineForSale.getName().equals(vaccine.getName())) {
                if (vaccineForSale.getBatchAvailability() > orderItem.getTotalQuantity() && vaccineForSale.getBatchAvailability() != 0) {
                    int newBatchSize = vaccineForSale.getBatchAvailability() - orderItem.getTotalQuantity();
                    vaccineForSale.setBatchAvailability(newBatchSize);
                    Date manufacturingBatch = vaccineForSale.getManufacturingBatch();
                    Date expiryDate = vaccineForSale.getExpiryDate();
                    orderItem.setManufacturingBatch(manufacturingBatch);
                    orderItem.setExpiryDate(expiryDate);
                    break;
                } else if (vaccineForSale.getBatchAvailability() < orderItem.getTotalQuantity() && vaccineForSale.getBatchAvailability() != 0) {
                    int leftQuantity = orderItem.getTotalQuantity() - vaccineForSale.getBatchAvailability();
                    vaccineForSale.setBatchAvailability(0);
                    for (Vaccine v : enterprise.getVaccineInventory().getVaccineInventoryList()) {
                        if (v.getName().equals(vaccineForSale.getName())) {
                            if (v.getBatchAvailability() > leftQuantity) {
                                int newBatchSize = v.getBatchAvailability() - leftQuantity;
                                v.setBatchAvailability(newBatchSize);
                                Date manufacturingBatch = v.getManufacturingBatch();
                                orderItem.setManufacturingBatch(manufacturingBatch);
                                Date expiryDate = vaccineForSale.getExpiryDate();
                                orderItem.setExpiryDate(expiryDate);
                                break;
                            }
                        }
                    }
                    break;
                }
            }
        }
        SiteEnterprise siteEnterprise = (SiteEnterprise) orderJTable.getValueAt(selectedRow, 1);
        Order order = (Order) orderJTable.getValueAt(selectedRow, 4);
        ship(stateName, orderItem, siteEnterprise, order);
    }//GEN-LAST:event_shipJButtonActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJButton;
    private javax.swing.JButton displayJLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel orderJLabel;
    private javax.swing.JTable orderJTable;
    private javax.swing.JLabel panelDescriptionJLabel;
    private javax.swing.JButton shipJButton;
    private javax.swing.JLabel vaccineJLabel;
    private javax.swing.JList vaccineJList;
    // End of variables declaration//GEN-END:variables
}
